---
import { APICard } from '@/components/APICard';
import BaseLayout from '@/layouts/BaseLayout.astro';

// Data Method 1: Local Frontmatter Data
const dataMethod1 = ['Chris', 'John', 'Krix'];

// Data Method 2: Fetch Remote Data
type Post = {
  userId: number;
  id: number;
  title: string;
  body: string;
};
const res = await fetch('https://jsonplaceholder.typicode.com/posts');
const dataMethod2: Post[] = await res.json();

// Data Method 3: Import Local Files
import dataMethod3Json from '@/data/authors.json';
import dataMethod3Ts from '@/data/authors';
import type { MarkdownInstance } from 'astro';
import { getCollection } from 'astro:content';

// Deprecated: Astro.glob (ref: https://docs.astro.build/en/guides/upgrade-to/v5/#what-should-i-do-3)
// const dataMethod3Glob = await Astro.glob('@/data/**/*md'); // (Deprecated)

// Read more MarkdownInstance: https://docs.astro.build/en/reference/api-reference/#markdown-files
const dataMethod3Glob = Object.values<MarkdownInstance<{}>>(
  import.meta.glob('@/data/*.md', {
    eager: true,
  })
);

// Data Method 4: Content Collections
const dataMethod4 = await getCollection('product');
---

<BaseLayout title="Work with astro data">
  <h1>Astro Data Options</h1>

  <div class="card-wrapper">
    <div>
      <h2>1. Local Frontmatter Data</h2>
      <ul>
        {dataMethod1.map((name) => <li>{name}</li>)}
      </ul>
    </div>

    <div>
      <h2>2. Fetch Remote Data</h2>
      <ul>
        {dataMethod2.slice(0, 6).map((post) => <li>{post.title}</li>)}
      </ul>
    </div>

    <div>
      <h2>3. Import Local Files</h2>
      <h3>JSON file</h3>
      <ul>
        {dataMethod3Json.map((author) => <li>{author.name}</li>)}
      </ul>
      <h3>Typescript file</h3>
      <ul>
        {dataMethod3Ts.map((author) => <li>{author.name}</li>)}
      </ul>
      <h3>Glob (markdown file)</h3>
      <ul>
        {
          dataMethod3Glob.map((markdown) => (
            <Fragment set:html={markdown.compiledContent()} />
          ))
        }
        <!-- Alternative way to render markdown content -->
        {
          dataMethod3Glob.map((markdown) => {
            const Content = markdown.Content;

            return <Content />;
          })
        }
      </ul>
    </div>

    <div>
      <h2>4. Content Collections</h2>
      <details>
        <summary>Data type</summary>
        <ul>
          <li>
            <strong>id:</strong> full file name <strong>(car1.md)</strong>
          </li>
          <li><strong>slug:</strong> file name <strong>(car1)</strong></li>
          <li>
            <strong>filePath:</strong> file path from src/ <strong
              >(ex: src/content/car/car1.md)</strong
            >
          </li>
          <li><strong>body:</strong> markdown body content</li>
          <li><strong>collection:</strong> the parent collection name</li>
          <li>
            <strong>data:</strong> the frontmatter <strong
              >(infer the defined schema)</strong
            >
          </li>
          <li>
            <strong>rendered:</strong> html and metadata
            <ul>
              <li>html: content convert from markdown to html</li>
              <li>
                metadata: information of headings, images (ex/internal),
                frontmatter, imagePaths
              </li>
            </ul>
          </li>
        </ul>
      </details>
      <ul>
        {dataMethod4.map((car) => <li>{car.data.name}</li>)}
      </ul>
      <ul>
        {
          dataMethod4.map((car) => {
            const html = car.rendered?.html;

            return (
              <li>
                <Fragment set:html={html} />
              </li>
            );
          })
        }
      </ul>
    </div>

    <div>
      <h2>5. Create JSON endpoints</h2>
      <ul>
        {dataMethod1.map((name) => <li>{name}</li>)}
        <APICard client:load />
      </ul>
    </div>
  </div>
</BaseLayout>
