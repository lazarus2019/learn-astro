---
import type { ImageMetadata, ImageOutputFormat } from 'astro';
import { getImage } from 'astro:assets';

type Props = {
  src: ImageMetadata;
  alt?: string;
  format?: ImageOutputFormat;
  sizes: number[];
};

const generateResponsiveImage = async ({
  sizes,
  src,
  format,
}: Omit<Props, 'alt'>) => {
  const imgSrcSet = sizes.map(async (size) => {
    const image = await getImage({
      src,
      width: size,
      format,
    });

    return `${image.src} ${size}w`;
  });

  const imgSrc = await getImage({
    src,
    width: Math.max(...sizes),
    format,
  });

  return {
    srcSet: await Promise.all(imgSrcSet),
    imgSrc: imgSrc.src,
  };
};

const { alt = '', sizes, src, format = 'avif' } = Astro.props;

const { imgSrc, srcSet } = await generateResponsiveImage({
  src,
  sizes,
  format,
});

console.log(srcSet, imgSrc)
---

<img srcset={srcSet.join(', ')} alt={alt} src={imgSrc} />
